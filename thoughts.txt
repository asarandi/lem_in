01-05-2017 ** try breadth-first-search for finding shortest path between two nodes

use get_next_line to read stdin,
implement a 'str_split' to make things easier,

--
first line should be number of ants, always numeric > 0, otherwise "error"
--
... next should be a block of lines format 'nnn xxx yyy', where n is the name of the room, x and y are coordinates,
coordinates must be numeric otherwise error,

use str_split, or maybe write a function similar to php 'explode' or python 'split',
the lines with room names and coordinates should have three words only, separated by space, otherwise "error" + coordinates must be numeric
..
look out for comments .. use ft_strequ .. look for "##start" -> two hashtags, all lowercase and "##end" .. same;
set appropriate flags in your structure; comments with a single hashtag can be ignored;
..
..
last block of stdin should be links,
again you could use "explode" here,
links format is "room1-room2"
..
..
iterate through the list of links, all links must have two valid room names and a dash inbetween (explode ("-")
if link has invalid/inexistant room number then "error"
..
..


so once again:
line 1 must be numeric - number of ants, must be > 0 (unless comment #)
next is (a block of lines) list of rooms, 3 words per line, word 2 and 3 must be numeric (pdf says integers), 
look for ##start and ##end comments
room names cannot start with 'L' or '#',
room names cannot be duplicates? error
non compliant or empty lines will generate "error";
next is (a block of lines) links between rooms,  "room1-room2" format, room names must be valid
duplicate nodes should generate "error" ?
..
after displaying input on stdout,
calculate the other direction of the links, because links are bi-directional; add that to your structure
if room1 links to room2 (room1-room2)  .. then room2 links to room1

